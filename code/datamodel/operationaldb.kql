// Create raw tables
.create-merge tables
    ott_raw(
        Country: string,
        Isp: string,
        CdnNodeHost: string,
        Type: string,
        Title: string,
        SelectedQuality: string,
        DeviceType: string,
        Version: string,
        Connection: string,
        CommercilizationType: string,
        DeviceVendor: string,
        HappinessScore: real,
        UserId: string
    ),
    iptv_raw(
        AppVersion: string,
        Country: string,
        HappinessScore: real,
        HwModel: string,
        Service: string,
        ServiceType: string,
        StbModel: string,
        StreamingProtocol: string,
        Title: string,
        Topology2: string,
        Topology3: string,
        Topology4: string,
        Topology5: string,
        TvModel: string,
        UserId: string
    )

// Create curated tables
.create-merge tables
    ott_happiness(
        Country: string,
        Isp: string,
        CdnNodeHost: string,
        Type: string,
        Title: string,
        SelectedQuality: string,
        DeviceType: string,
        Version: string,
        Connection: string,
        CommercilizationType: string,
        DeviceVendor: string,
        AvgHappinessScore: real,
        NumberOfUsers: long,
        Timestamp: datetime
    ),
    iptv_happiness(
        AppVersion: string,
        Country: string,
        HwModel: string,
        Service: string,
        ServiceType: string,
        StbModel: string,
        StreamingProtocol: string,
        Title: string,
        Topology2: string,
        Topology3: string,
        Topology4: string,
        Topology5: string,
        TvModel: string,
        AvgHappinessScore: real,
        NumberOfUsers: long,
        Timestamp: datetime
    )

// Create helper tables
.create-merge tables
    thresholds (
        name: string,
        value: real,
        timestamp: datetime
    )

// Create function
.create-or-alter function with (docstring = 'Function to get average happiness scores for iptv data', folder='iptv') IptvGetAvgHappinessScore() {
    let currentTimestamp = now();
    let movingWindowInMinutes = GetThreshold('movingWindowInMinutes');
    iptv_raw
    | summarize
        AvgHappinessScore = avg(HappinessScore),
        NumberOfUsers = count_distinct(UserId),
        Timestamp = currentTimestamp
        by
        AppVersion,
        Country,
        HwModel,
        Service,
        ServiceType,
        StbModel,
        StreamingProtocol,
        Title,
        Topology2,
        Topology3,
        Topology4,
        Topology5,
        TvModel
}

.create-or-alter function with (docstring = 'Function to get average happiness scores for ott data', folder='ott') OttGetAvgHappinessScore() {
    let currentTimestamp = now();
    let movingWindowInMinutes = GetThreshold('movingWindowInMinutes');
    ott_raw
    | summarize
        AvgHappinessScore = avg(HappinessScore),
        NumberOfUsers = count_distinct(UserId),
        Timestamp = currentTimestamp
        by
        Country,
        Isp,
        CdnNodeHost,
        Type,
        Title,
        SelectedQuality,
        DeviceType,
        Version,
        Connection,
        CommercilizationType,
        DeviceVendor
}

.create-or-alter function with (docstring = 'Function to get average happiness scores for ott data for one column', folder='ott') OttGetAvgHappinessScoreForOneColumn(columnName: string) {
    ott_happiness
    | extend TotalHappiness = NumberOfUsers * AvgHappinessScore
    | summarize
        SumTotalHappiness = sum(TotalHappiness),
        SumNumberOfUsers = sum(NumberOfUsers)
        by
        Timestamp,
        column_ifexists(columnName, 'columnName does not exist')
    | extend AvgHappinessScore = SumTotalHappiness / SumNumberOfUsers
    | project-away SumTotalHappiness, SumNumberOfUsers
}

.create-or-alter function with (docstring = 'Function to get average happiness scores for ott data for two columns', folder='ott') OttGetAvgHappinessScoreForTwoColumns(columnName1: string, columnName2: string) {
    ott_happiness
    | extend TotalHappiness = NumberOfUsers * AvgHappinessScore
    | summarize
        SumTotalHappiness = sum(TotalHappiness),
        SumNumberOfUsers = sum(NumberOfUsers)
        by
        Timestamp,
        column_ifexists(columnName1, 'columnName1 does not exist'),
        column_ifexists(columnName2, 'columnName2 does not exist')
    | extend AvgHappinessScore = SumTotalHappiness / SumNumberOfUsers
    | project-away SumTotalHappiness, SumNumberOfUsers
}

.create-or-alter function with (docstring = 'Function to get average happiness scores for iptv data for one column', folder='iptv') IptvGetAvgHappinessScoreForOneColumn(columnName: string) {
    iptv_happiness
    | extend TotalHappiness = NumberOfUsers * AvgHappinessScore
    | summarize
        SumTotalHappiness = sum(TotalHappiness),
        SumNumberOfUsers = sum(NumberOfUsers)
        by
        Timestamp,
        column_ifexists(columnName, 'columnName does not exist')
    | extend AvgHappinessScore = SumTotalHappiness / SumNumberOfUsers
    | project-away SumTotalHappiness, SumNumberOfUsers
}

.create-or-alter function with (docstring = 'Function to get average happiness scores for iptv data for two columns', folder='iptv') IptvGetAvgHappinessScoreForTwoColumns(columnName1: string, columnName2: string) {
    iptv_happiness
    | extend TotalHappiness = NumberOfUsers * AvgHappinessScore
    | summarize
        SumTotalHappiness = sum(TotalHappiness),
        SumNumberOfUsers = sum(NumberOfUsers)
        by
        Timestamp,
        column_ifexists(columnName1, 'columnName1 does not exist'),
        column_ifexists(columnName2, 'columnName2 does not exist')
    | extend AvgHappinessScore = SumTotalHappiness / SumNumberOfUsers
    | project-away SumTotalHappiness, SumNumberOfUsers
}

.create-or-alter function with (docstring = 'Function to get latest threshold value for named threshold', folder='thresholds') GetThreshold(valueName: string) {
    toscalar(
        thresholds
        | where name == valueName
        | order by timestamp desc
        | limit 1
        | summarize max(value)
    )
}

////////////////////////////////////////////////
// Create materialized view and view for testing
////////////////////////////////////////////////

// Create materalized view
.create ifnotexists materialized-view with (docString='IPTV Happiness Score Average', folder='iptv') iptv_happiness_mv on table iptv_raw {
    iptv_raw
    | summarize
        AvgHappinessScore = avg(HappinessScore),
        NumberOfUsers = dcount(UserId)
        by
        AppVersion,
        Country,
        HwModel,
        Service,
        ServiceType,
        StbModel,
        StreamingProtocol,
        Title,
        Topology2,
        Topology3,
        Topology4,
        Topology5,
        TvModel
}

.create ifnotexists materialized-view with (docString='OTT Happiness Score Average', folder='ott') ott_happiness_mv on table ott_raw {
    ott_raw
    | summarize
        AvgHappinessScore = avg(HappinessScore),
        NumberOfUsers = dcount(UserId)
        by
        Country,
        Isp,
        CdnNodeHost,
        Type,
        Title,
        SelectedQuality,
        DeviceType,
        Version,
        Connection,
        CommercilizationType,
        DeviceVendor
}

// Create views
.create-or-alter function with (view=true, docstring='View to capture critical iptv items below the happiness threshold', folder='iptv') iptv_happiness_critical_mv {
    iptv_happiness_mv
    | where AvgHappinessScore < GetThreshold('happiness') and NumberOfUsers > GetThreshold('minimumNumberOfUsersPerWindow')
}

.create-or-alter function with (view=true, docstring='View to capture critical ott items below the happiness threshold', folder='ott') ott_happiness_critical_mv {
    ott_happiness_mv
    | where AvgHappinessScore < GetThreshold('happiness') and NumberOfUsers > GetThreshold('minimumNumberOfUsersPerWindow')
}
