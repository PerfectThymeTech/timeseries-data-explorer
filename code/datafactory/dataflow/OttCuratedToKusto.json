{
	"name": "OttCuratedToKusto",
	"properties": {
		"folder": {
			"name": "OTT"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AzureDataLakeSource",
					"description": "Source dataset in Azure Data Lake"
				},
				{
					"linkedService": {
						"referenceName": "AzureDataExplorer",
						"type": "LinkedServiceReference"
					},
					"name": "KustoSinkReference",
					"description": "Kusto Sink Reference Dataset"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataExplorer",
						"type": "LinkedServiceReference"
					},
					"name": "KustoSink",
					"description": "Sink dataset in Kusto",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "ExistingHashes"
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceFileSystem as string,",
				"     sourceFolderPath as string,",
				"     sinkTable as string,",
				"     logsFileSystem as string,",
				"     logsFolderPath as string",
				"}",
				"source(output(",
				"          Country as string,",
				"          Service as string,",
				"          ServiceType as string,",
				"          Device as string,",
				"          Title as string,",
				"          Isp as string,",
				"          CdnHostname as string,",
				"          CdnPop as string,",
				"          AppReleaseVersion as string,",
				"          Browser as string,",
				"          Os as string,",
				"          Player as string,",
				"          HappinessScore as float,",
				"          UserId as string,",
				"          EndTime as timestamp,",
				"          Hash as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($sourceFileSystem),",
				"     folderPath: ($sourceFolderPath)) ~> AzureDataLakeSource",
				"source(output(",
				"          Country as string,",
				"          Service as string,",
				"          ServiceType as string,",
				"          Device as string,",
				"          Title as string,",
				"          Isp as string,",
				"          CdnNodeHostname as string,",
				"          CdnPop as string,",
				"          AppReleaseVersion as string,",
				"          Browser as string,",
				"          Os as string,",
				"          Player as string,",
				"          HappinessScore as double,",
				"          UserId as string,",
				"          EndTime as timestamp,",
				"          Hash as string,",
				"          CdnHostname as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: ($sinkTable),",
				"     store: 'azuredataexplorer') ~> KustoSinkReference",
				"AzureDataLakeSource, KustoSinkReference exists(AzureDataLakeSource@Hash == KustoSinkReference@Hash,",
				"     negate:true,",
				"     broadcast: 'auto')~> ExistingHashes",
				"ExistingHashes sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: ($sinkTable),",
				"     store: 'azuredataexplorer',",
				"     postSQLs:[(concat('.delete table ', $sinkTable, ' records with (whatif=false) <| ', $sinkTable, ' | sort by Hash, ingestion_time() desc | where row_cumsum(1,prev(Hash) != Hash) > 1'))],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: ($logsFileSystem),",
				"     assertFailure_folderPath: ($logsFolderPath)) ~> KustoSink"
			]
		}
	}
}