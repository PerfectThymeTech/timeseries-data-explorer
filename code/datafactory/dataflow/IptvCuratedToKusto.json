{
	"name": "IptvCuratedToKusto",
	"properties": {
		"folder": {
			"name": "IPTV"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AzureDataLakeSource",
					"description": "Source dataset in Azure Data Lake"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataExplorer",
						"type": "LinkedServiceReference"
					},
					"name": "KustoSink",
					"description": "Sink dataset in Kusto",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "SelectColumns",
					"description": "Drop Pipeline ID Column"
				},
				{
					"name": "FilterRows",
					"description": "Filter based on pipeline IDs."
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceFileSystem as string,",
				"     sourceFolderPath as string,",
				"     sinkTable as string,",
				"     logsFileSystem as string,",
				"     logsFolderPath as string,",
				"     pipelineId as string",
				"}",
				"source(output(",
				"          Country as string,",
				"          Service as string,",
				"          ServiceType as string,",
				"          Topology2 as string,",
				"          Topology3 as string,",
				"          Topology4 as string,",
				"          Topology5 as string,",
				"          Title as string,",
				"          StbModel as string,",
				"          StbManufacturer as string,",
				"          StbSwVersion as string,",
				"          StreamingProtocol as string,",
				"          CdnHostname as string,",
				"          CdnPop as string,",
				"          ChannelName as string,",
				"          HappinessScore as float,",
				"          UserId as string,",
				"          EndTime as timestamp,",
				"          Hash as string,",
				"          PipelineId as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     fileSystem: ($sourceFileSystem),",
				"     folderPath: ($sourceFolderPath)) ~> AzureDataLakeSource",
				"FilterRows select(mapColumn(",
				"          each(match(name!='PipelineId'))",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"AzureDataLakeSource filter(PipelineId == $pipelineId) ~> FilterRows",
				"SelectColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     tableName: ($sinkTable),",
				"     store: 'azuredataexplorer',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: ($logsFileSystem),",
				"     assertFailure_folderPath: ($logsFolderPath)) ~> KustoSink"
			]
		}
	}
}