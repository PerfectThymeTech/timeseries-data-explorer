{
	"name": "OttRawToCurated",
	"properties": {
		"description": "Dataflow to copy OTT data from Raw to Curated",
		"folder": {
			"name": "OTT"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AzureDataLakeSource",
					"description": "Source dataset in Azure Data Lake"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					},
					"name": "AzureDataLakeSink",
					"description": "Sink dataset in Azure Data Lake",
					"rejectedDataLinkedService": {
						"referenceName": "AzureDataLakeStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "DistinctRows"
				},
				{
					"name": "RenameColumns",
					"description": "Rename Columns"
				},
				{
					"name": "FilterEmptyHappinessScore",
					"description": "Filter Empty Happiness Score Rows"
				},
				{
					"name": "HarmonizeColumn",
					"description": "Harmonize columns: Connection, DeviceVendor"
				},
				{
					"name": "AlterRow"
				}
			],
			"scriptLines": [
				"parameters{",
				"     sourceFolderPath as string,",
				"     sourceFileName as string,",
				"     sourceFileSystem as string,",
				"     sinkFileSystem as string,",
				"     sinkFolderPath as string,",
				"     logsFileSystem as string,",
				"     logsFolderPath as string",
				"}",
				"source(output(",
				"          Country as string,",
				"          ISP as string,",
				"          {CDN Node Host} as string,",
				"          Type as string,",
				"          Title as string,",
				"          SELECTED_QUALITY as string,",
				"          DEVICE_TYPE as string,",
				"          VERSION as string,",
				"          CONNECTION as string,",
				"          {COMMERCIALIZATION TYPE} as string,",
				"          {Device Vendor} as string,",
				"          {Happiness Score} as float,",
				"          {User ID} as long,",
				"          {End Time} as timestamp",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     fileSystem: ($sourceFileSystem),",
				"     folderPath: ($sourceFolderPath),",
				"     fileName: ($sourceFileName),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> AzureDataLakeSource",
				"RenameColumns aggregate(groupBy(mycols = sha2(256,columns())),",
				"     each(match(true()), $$ = first($$))) ~> DistinctRows",
				"AzureDataLakeSource select(mapColumn(",
				"          Country,",
				"          Isp = ISP,",
				"          CdnNodeHost = {CDN Node Host},",
				"          Type,",
				"          Title,",
				"          SelectedQuality = SELECTED_QUALITY,",
				"          DeviceType = DEVICE_TYPE,",
				"          Version = VERSION,",
				"          Connection = CONNECTION,",
				"          CommercilizationType = {COMMERCIALIZATION TYPE},",
				"          DeviceVendor = {Device Vendor},",
				"          HappinessScore = {Happiness Score},",
				"          UserId = {User ID},",
				"          EndTime = {End Time}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameColumns",
				"DistinctRows filter(!isNull(HappinessScore)) ~> FilterEmptyHappinessScore",
				"FilterEmptyHappinessScore derive(Connection = lower(Connection),",
				"          DeviceVendor = lower(DeviceVendor)) ~> HarmonizeColumn",
				"HarmonizeColumn alterRow(upsertIf(true())) ~> AlterRow",
				"AlterRow sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delta',",
				"     fileSystem: ($sinkFileSystem),",
				"     folderPath: ($sinkFolderPath),",
				"     mergeSchema: true,",
				"     autoCompact: true,",
				"     optimizedWrite: true,",
				"     vacuum: 0,",
				"     deletable: false,",
				"     insertable: false,",
				"     updateable: false,",
				"     upsertable: true,",
				"     keys:['Country','Isp','CdnNodeHost','Type','Title','SelectedQuality','DeviceType','Version','Connection','CommercilizationType','DeviceVendor','UserId','EndTime'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     outputAssertFailedRows: true,",
				"     assertFailure_fileSystem: ($logsFileSystem),",
				"     assertFailure_folderPath: ($logsFolderPath),",
				"     partitionBy('key',",
				"          0,",
				"          Country",
				"     )) ~> AzureDataLakeSink"
			]
		}
	}
}